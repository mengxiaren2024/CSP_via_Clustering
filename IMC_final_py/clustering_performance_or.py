#######LENET
#https://www.researchgate.net/publication/2985446_Gradient-Based_Learning_Applied_to_Document_Recognition
#https://towardsdatascience.com/understanding-and-implementing-lenet-5-cnn-architecture-deep-learning-a2d531ebc342
#binary representation learning
##########################input data
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
from sklearn import manifold
from sklearn.cluster import SpectralClustering
from torch.optim.lr_scheduler import CosineAnnealingLR
from sklearn import metrics
from sklearn.cluster import KMeans


csp_dset=[]
new_data_or = pd.read_csv("csp_vec_final.csv", low_memory=False)
csv_data = pd.read_csv("csp_vec_final.csv", low_memory=False)
csv_data.drop(columns=['Unnamed: 0', 'Unnamed: 0.1', 'Site', 'csp_con', 'domain'],inplace=True)
print(len(csv_data.columns))


#randomly sample 1000 datapoints
#sample_index=random.sample(range(0, 13317), 1000)
sample_index= [10136, 8786, 9876, 5989, 4574, 1800, 10470, 7231, 1232, 6413, 899, 12470, 8232, 160, 6854, 10474, 6691, 10389, 1999, 8063, 4974, 12061, 213, 1926, 3588, 36, 11034, 5418, 4993, 4190, 12035, 4392, 937, 12118, 9436, 4240, 8563, 3090, 1621, 3438, 8647, 12515, 4708, 1660, 11197, 12731, 7578, 7178, 8935, 4744, 2267, 9804, 4572, 7533, 8366, 5174, 3986, 10189, 4559, 2487, 8551, 5884, 12600, 5415, 8380, 11812, 960, 4068, 10327, 8395, 3480, 9051, 10295, 6548, 11028, 5725, 1675, 383, 7446, 9247, 1413, 11600, 10942, 471, 2198, 11392, 5754, 8382, 2118, 5421, 3825, 6429, 2898, 11628, 5423, 898, 8403, 12447, 8037, 8331, 1537, 10641, 10352, 1609, 953, 6380, 5619, 1996, 12258, 1399, 7991, 7734, 461, 7080, 499, 4041, 7509, 2769, 10533, 7194, 6371, 1219, 6394, 2836, 12169, 3846, 8940, 12490, 13214, 1995, 7300, 2620, 2402, 2854, 10744, 8090, 2797, 1135, 13251, 1384, 10115, 9686, 6578, 8641, 8478, 7822, 2248, 4067, 9216, 826, 7553, 8172, 9905, 12473, 8418, 923, 5685, 13097, 2839, 3112, 3054, 5850, 1639, 9428, 4629, 4834, 4747, 12261, 12126, 6627, 571, 7644, 8468, 6805, 3215, 6175, 6211, 8845, 4053, 4631, 9885, 1855, 11144, 7344, 5097, 1597, 942, 3440, 11175, 2778, 6742, 7350, 9257, 6868, 13131, 10387, 3442, 3271, 12317, 469, 4560, 3806, 2369, 4126, 6179, 11687, 6830, 8631, 1858, 6888, 2975, 1844, 3368, 226, 9640, 702, 2520, 6802, 38, 9995, 5359, 2650, 2101, 9457, 193, 808, 12884, 4640, 8238, 8308, 3411, 3097, 4521, 1938, 5367, 6113, 711, 522, 49, 10536, 8215, 1690, 5688, 4332, 12850, 2573, 11681, 12834, 6253, 3777, 3817, 13173, 6240, 8105, 8239, 6896, 8708, 8433, 9153, 10868, 3013, 1216, 5314, 535, 13289, 2170, 7835, 7025, 9378, 7135, 10624, 8732, 7753, 7125, 474, 12583, 4787, 11444, 12089, 4211, 4754, 5133, 8524, 4686, 9820, 7699, 3072, 7469, 2154, 8413, 9429, 10905, 8278, 10970, 12837, 5803, 6931, 4688, 6433, 2920, 5806, 1620, 748, 1560, 12762, 1204, 10869, 4604, 3034, 9807, 7458, 1465, 12129, 9504, 3347, 13056, 1318, 1587, 7894, 2220, 10424, 684, 13141, 6212, 3632, 6489, 11439, 9523, 4486, 5347, 5437, 6373, 7439, 11023, 9877, 5947, 9, 3715, 2464, 3567, 2681, 9283, 8675, 6436, 11537, 9798, 4776, 8861, 4885, 9883, 7219, 13190, 2492, 9907, 624, 3011, 820, 8218, 8522, 3702, 1199, 11271, 6440, 520, 11285, 9998, 13271, 7692, 4327, 8717, 1360, 4178, 6223, 3757, 9669, 6497, 6219, 9697, 13057, 9552, 1832, 4455, 2, 1137, 2623, 7900, 10998, 7160, 3882, 3897, 9451, 4267, 9239, 169, 3761, 7741, 11597, 1845, 4197, 10605, 5643, 7127, 12618, 9535, 1251, 10461, 2314, 5672, 8628, 9171, 7441, 972, 258, 4233, 5798, 1253, 9573, 5065, 11811, 2475, 1149, 7663, 11187, 10269, 2181, 854, 12748, 422, 8261, 2862, 496, 6221, 7601, 1877, 5280, 12923, 12642, 7819, 7164, 5859, 2867, 4784, 4046, 11209, 1712, 4988, 2102, 8938, 10042, 11572, 12388, 12301, 10273, 290, 11354, 7009, 865, 6056, 4306, 9854, 12048, 10850, 13050, 5908, 526, 4978, 4480, 7316, 4026, 215, 549, 9377, 5826, 12519, 7869, 6799, 7996, 7534, 800, 2585, 11928, 3428, 12095, 5276, 13259, 3473, 6810, 8481, 11858, 13040, 2147, 3371, 11074, 10485, 6351, 8825, 2806, 982, 4228, 2842, 10297, 6728, 6722, 10687, 452, 4032, 8457, 2747, 8424, 6512, 6382, 8982, 13238, 9474, 9642, 3000, 2848, 1778, 9997, 12208, 4418, 11941, 1568, 12607, 12601, 11511, 9388, 6084, 567, 13085, 4698, 7241, 6400, 6821, 8325, 8923, 4, 5122, 5282, 10538, 13264, 1586, 2682, 585, 7610, 7196, 12412, 9302, 7963, 11472, 9263, 8096, 3462, 11046, 3981, 5978, 7386, 13232, 4238, 4507, 1992, 2913, 11957, 11159, 7150, 910, 370, 974, 11073, 9533, 5051, 1861, 1493, 6617, 11994, 12632, 8753, 10086, 5441, 3504, 11568, 698, 11301, 13091, 9109, 3303, 2068, 6620, 5983, 5956, 1556, 93, 13069, 2384, 11903, 6718, 5692, 1269, 311, 11846, 5456, 9115, 3169, 3889, 4183, 8818, 4962, 5323, 11868, 9895, 11769, 1159, 10458, 958, 8930, 10153, 2330, 3305, 11356, 2617, 7250, 1616, 1942, 1287, 1509, 9666, 5399, 10403, 9687, 2819, 9897, 6355, 12406, 11416, 9134, 4018, 10569, 2474, 10918, 8710, 12578, 9252, 11523, 5428, 1945, 11759, 3058, 7358, 12620, 6187, 459, 2021, 8928, 4028, 13133, 1922, 5602, 381, 1144, 6279, 10311, 9005, 7375, 1192, 5915, 2883, 12580, 371, 9420, 8340, 13020, 2611, 2117, 6048, 1599, 1786, 584, 6588, 12835, 11110, 6901, 2424, 6665, 2508, 6013, 5413, 4072, 8887, 10264, 13153, 10140, 12210, 7216, 2962, 9288, 7062, 3828, 1758, 10213, 2963, 6777, 5622, 11881, 7959, 1170, 8299, 1753, 3569, 10475, 4367, 1888, 8121, 10544, 3678, 220, 7136, 597, 848, 3307, 1904, 8673, 13304, 515, 9759, 557, 985, 4821, 5981, 2280, 419, 2785, 7506, 5108, 9108, 8895, 6079, 12135, 6386, 8398, 6126, 4893, 189, 6642, 1757, 11243, 7977, 1728, 1924, 3555, 137, 780, 894, 7949, 6323, 664, 6504, 12147, 7893, 12504, 11565, 8834, 4573, 7944, 9949, 9490, 9792, 3405, 3061, 246, 12984, 2120, 12335, 4567, 3485, 4860, 3016, 1519, 11078, 532, 6686, 10899, 1550, 4265, 4581, 5103, 5321, 7406, 5760, 4889, 9589, 5114, 2436, 11745, 12151, 12523, 10668, 7655, 13237, 2815, 3666, 8897, 11468, 11211, 9546, 1110, 6700, 5217, 1438, 7433, 5407, 13083, 7018, 3972, 8532, 9773, 9763, 5586, 10838, 12959, 12856, 6190, 7089, 5732, 10376, 9850, 4930, 8544, 11732, 10614, 6560, 10892, 8626, 2996, 10009, 10131, 4275, 8855, 1211, 1527, 13287, 10308, 8904, 201, 5532, 11155, 8367, 7886, 2011, 4220, 11838, 12234, 11854, 282, 4878, 10849, 9726, 4654, 2317, 11331, 13113, 6275, 308, 1738, 279, 12113, 3512, 7908, 1698, 7010, 3891, 12920, 5389, 8133, 13239, 11950, 12624, 819, 708, 11998, 11870, 11529, 7225, 9565, 1374, 8679, 1644, 9569, 325, 4444, 3162, 2506, 8604, 142, 875, 5258, 330, 3242, 13302, 3222, 12779, 12485, 7102, 7902, 10195, 3675, 3609, 3492, 8637, 3038, 2130, 9579, 4005, 12957, 3849, 839, 7312, 6895, 1947, 6235, 9140, 1817, 10523, 2938, 331, 5682, 570, 3803, 3594, 9029, 6398, 8588, 9465, 13101, 2820, 12654, 3470, 4123, 5, 4579, 9799, 3523, 1643, 5847, 4842, 10382, 9385, 12084, 5933, 12239, 1911, 9485, 3265, 12100, 8276, 11673, 10565, 963, 11006, 4750, 10207, 6420, 5836, 4219, 5361, 4971, 12280, 5858, 3988, 1982, 4770, 8936, 12776, 6255, 11653, 7524, 9917, 3108, 7752, 830, 2054, 6177, 1223, 5955, 1151, 852, 5872, 11872, 7307, 2434, 11596, 7559, 3584, 9349, 11579, 5650, 2228, 5240, 7357, 7829, 10563]
print(len(list(set(sample_index))))


color = ["red", "blue", "purple", "darkblue", "green",
         "orange", "#D12B60", "black", "brown", "deeppink",
         "olive","lawngreen", "darkorange", "forestgreen", "royalblue",
         "navy", "teal", "chocolate", "gold","yellow"]
# ###################spectral clustering rfb
plt.figure(figsize=(15, 15))
plot_num = 1

cspvec=np.array(csv_data)
print("embedding:",len(cspvec))
####################################################SP_NN
plt.figure(figsize=(15, 15))
plot_num = 1
for cn in range(5,21):
 clf = SpectralClustering(n_clusters=cn, affinity="nearest_neighbors",n_neighbors=200)
 label=clf.fit_predict(cspvec)
 # print("eyebow score:",clf.inertia_)
 if(len(np.unique(label))>1):
    print("num:", cn , " clusters:", len(np.unique(label))," cluster eval:", metrics.silhouette_score(cspvec, label))
 for i in  np.unique(label):
    print("cluster_",i,": ", len(cspvec[label == i]))
 col = "lab_spnn_or_" + str(cn)
 new_data_or[col] = label

# # ###########################################################################3d figure
 tsne = manifold.TSNE(n_components=2, init='pca', random_state=0)
 cspv = tsne.fit_transform(cspvec)
 df=np.hstack((cspv,label.reshape(-1,1)))
 plt.subplot(4, 4, plot_num)
 u_labels = np.unique(label)
 # print(len(u_labels))
#############################################################################
 for i in u_labels:
      plt.scatter(df[label == i, 0], df[label == i, 1], s=5, color=color[i], label=("Cluster " + str(i + 1)))
 # ax.legend(prop={'size': 5.5}, loc='lower right')
 plot_num += 1

fil1="cl_test_1/SP_NN_or.png"
plt.savefig(fil1)

# #######################################################Kmeans
plt.figure(figsize=(15, 15))
plot_num = 1
label_all=[]
# print("type of embeddings:",type(embeddings))
# cspvec= embeddings.detach().numpy()

for cn in range(5,21):
 clf = KMeans(n_clusters=cn,init = "k-means++")
 label=clf.fit_predict(cspvec)
 # print("eyebow score:",clf.inertia)
 if(len(np.unique(label))>1):
    print("num:", cn , " clusters:", len(np.unique(label))," cluster eval:", metrics.silhouette_score(cspvec, label))
 for i in  np.unique(label):
    print("cluster_",i,": ", len(cspvec[label == i]))
 col = "lab_kmeans_or_" + str(cn)
 new_data_or[col] = label
# # ###########################################################################3d figure
 tsne = manifold.TSNE(n_components=2, init='pca', random_state=0)
 cspv = tsne.fit_transform(cspvec)
 df=np.hstack((cspv,label.reshape(-1,1)))
 plt.subplot(4, 4, plot_num)
 u_labels = np.unique(label)
 # print(len(u_labels))
 #color=["red","blue","purple","darkblue","green","orange","#D12B60","black","brown","deeppink","olive", "lawngreen","darkorange","forestgreen","royalblue","navy","teal","chocolate","gold"]
#############################################################################
 for i in u_labels:
      plt.scatter(df[label == i, 0], df[label == i, 1], s=5, color=color[i], label=("Cluster " + str(i + 1)))
 # ax.legend(prop={'size': 5.5}, loc='lower right')
 plot_num += 1

fil2="cl_test_1/kmeans_or.png"
plt.savefig(fil2)
new_data_or.to_csv("cl_test_1/cl_test.csv")
